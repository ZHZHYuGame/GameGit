对于渲染方面，你是怎么进行优化的？

答：
1.嗯~比如说从UI方面进行优化的话，我们知道ui有一个rebuild流程，只要在同一个canvas下有一个元素进行过RectTransform的变化，贴图改变，透明度一些的改变，就会触发rebuild，但是没有改变的元素也会进行一次rebuild，如果我们不进行优化，会导致整体游戏的卡顿。我们采用了不同的功能使用不同的canvas进行优化。当然也有很多方法比如说动静分离，但是经过我们的实际操作与总结呢，动静分离在真正意义上是不存在的，因为我们每个ui元素没有说是完全的静止的，所以在ui框架下采用多个canvas来解决不同功能不产生耦合进行优化。
2.图形渲染的优化我们采用了利用图集，合批它们来减少draw call的产生，当然我们的图片如果占用过大的内存，会影响加载速度，一般来说我们会使用2的次方数比如512*512 1024*1024作为贴图的尺寸。还有Mipmap的上面的优化，因为mipmpas是预计算的一系列缩小版贴图，会增加咱们移动端，移动设备上可能要更多的内存，所以对于UI贴图，2d精灵图应该将mipmaps关掉。还有我们会将贴图进行压缩，移动安卓端的ETC与ETC2与ios端的PVRTC来进行压缩，（PC端是DXT1，DXT5）。在对于大贴图加载的时候，我们应该按需加载，避免一次性将所有的贴图加入内存中，而且对于不需要某些贴图的时候应该主动进行内存回收避免内存泄露，也就是定期清理不再使用的贴图。还有贴图的透明度，确保在不需要透明度的情况下使用不带透明贴图的格式（RGB），对于一些简单的ui元素可以使用剪切或者遮罩来代替透明，这样总体的贴图渲染优化就会大大提高。
3.3d物体最基本的优化就是利用静态合批与动态合批。模型方面不需要客户端去操作，告诉美术在不影响物体的整体观感去减少顶点与面数，减少人物骨骼的数量还有利用LOD来减少多边形的复杂度，近距离可以看到更多的细节，远距离就可以大概看到模型基本信息减低细节。更多的还是物理上的优化吧，对于没有需要参与物理的对象，关闭其物理属性来减少物理计算。资源加载的时候我们大多数使用异步的加载方式，避免游戏中出现的明显卡顿，并且通过对象池来进行对象的复用，减少io操作。对于场景中物体管理，我们利用了四叉树进行管理：在没有使用四叉树的情况下通常对象管理方式是将所有对象储存在一个数据结构里，进行全场景遍历。但是我们使用四叉树后，可以进行分区域管理对象，可以显著提高对象的管理效率。比方说：将物体失活会一同带走这个物体的物理系统与身上挂着的脚本，从而减少了计算量。我们的四叉树会设置到合理的容量，避免过度分裂或者单个节点的负载过大，使用对象池管理节点，避免内存分配抖动。